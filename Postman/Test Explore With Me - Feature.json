{
	"info": {
		"_postman_id": "c4af5535-88c2-4f91-8310-fe006d236f0f",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21754447"
	},
	"item": [
		{
			"name": "Создать подписку пользователем 2 на пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							"pm.test(\"Данные подписки должны соответствовать ожидаемым\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);",
							"    pm.expect(jsonData.subscriberId, '\"subscriberId\" field').to.eql(2);",
							"    pm.expect(jsonData.subscribingId, '\"subscribingId\" field').to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscription/:subscribingId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscription",
						":subscribingId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "subscribingId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать подписку пользователем 2 на пользователя 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							"pm.test(\"Данные подписки должны соответствовать ожидаемым\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);",
							"    pm.expect(jsonData.subscriberId, '\"subscriberId\" field').to.eql(2);",
							"    pm.expect(jsonData.subscribingId, '\"subscribingId\" field').to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscription/:subscribingId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscription",
						":subscribingId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "subscribingId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить подписки пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Список подписок должен соответствовать ожидаемому\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'subscriptions count for user 2').to.eql(2);",
							"",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);",
							"    pm.expect(jsonData[0].subscriberId, 'result[0]: \"subscriberId\" field').to.eql(2);",
							"    pm.expect(jsonData[0].subscribingId, 'result[0]: \"subscribingId\" field').to.eql(1);",
							"",
							"    pm.expect(jsonData[1].id, 'result[1]: \"id\" field').to.eql(2);",
							"    pm.expect(jsonData[1].subscriberId, 'result[1]: \"subscriberId\" field').to.eql(2);",
							"    pm.expect(jsonData[1].subscribingId, 'result[1]: \"subscribingId\" field').to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscription",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscription"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удалить  подписку пользователя 2 на пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscription/:subscribingId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscription",
						":subscribingId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "subscribingId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить события по подписе пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Список подписок должен соответствовать ожидаемому\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'actual events count for user 2').to.eql(1);",
							"",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);",
							"    pm.expect(jsonData[0].state, 'result[0]: \"state\" field').to.eql('PUBLISHED');",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscription/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscription",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}